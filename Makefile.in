# This file is (c) 1998 Ted Faber (faber@lunabase.org) see COPYRIGHT
# for the full copyright and limitations of liabilities.

prefix = @prefix@
exec_prefix = @exec_prefix@

BINDIR = @bindir@
DEFINESDIR = @datadir@/grap
MANDIR = @mandir@/man1

INSTALL=@INSTALL@
INSTALL_PROGRAM=@INSTALL_PROGRAM@
INSTALL_DATA=@INSTALL_DATA@
RM=rm -f
RMDIR=rmdir
MKDIR=mkdir
LEX=@LEX@
YACC=@YACC@
CXX=@CXX@
LIBOBJS=@LIBOBJS@
PERL=@PERL@
MKDEP=@MKDEP@
MKDEPFLAGS=@MKDEPFLAGS@

DISTDIR=grap-1.20pre5
SOURCES=grap.cc grap_lex.cc *.cc

CXXFLAGS +=@GXXFLAGS@ @DEFS@ 
# CXXFLAGS = -pipe @GXXFLAGS@ @DEFS@ 

# To suppress optimization of certain files under g++ where
# optimization is costly at compilation time and of minimial use at
# runtime.
SUPPRESS_OPT=@SUPPRESS_OPT@
NO_UNDEF=@NO_UNDEF@

EXE=@EXEEXT@
CKSUM_PROG=@CKSUM_PROG@

# solaris make uses these as defaults:

CCC=$(CXX)
CCFLAGS=$(CXXFLAGS)

OBJS=grap.o grap_lex.o grap_draw.o grap_pic.o grap_parse.o grap_tokenizer.o \
	version.o $(LIBOBJS)


all:	grap

.l.cc:
	$(LEX) -o$@ $<

grap:	.depend $(OBJS)
	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(OBJS) $(LDLIBS) -o grap
	@EXE_CORRECT@

y.tab.h grap.cc:	grap.y
	$(YACC) -d grap.y
	mv y.tab.c grap.cc

grap_lex.cc:	grap_lex.l y.tab.h


version.cc:	Makefile
	echo "#include <string>" > version.cc
	echo "using namespace std;" >> version.cc
	echo "string version=\"$(DISTDIR)\";" >> version.cc

# Under g++ the memory overhead for optimization of grap_tokenizer is
# high.  Compilation time becomes prohibitive and the function is only
# called once per execution, so this rule disables optimization for
# that file under g++ by default.  If --optimize-grap_tokenizer is
# given to configure, no attempt to suppress optimization is made.
grap_tokenizer.o:	grap_tokenizer.cc
	$(CXX) ${CXXFLAGS} ${SUPPRESS_OPT} -c grap_tokenizer.cc

# flex defines an unused static function.  This rule supresses that
# warning under g++.
grap_lex.o:	grap_lex.cc
	$(CXX) ${CXXFLAGS} ${NO_UNDEF} -c grap_lex.cc

y.output:	grap.y
	$(YACC) -v grap.y

grap.man:	grap.1
	groff -mdoc -Tascii grap.1 > grap.man

grap.ps:	grap.1
	groff -mdoc grap.1 > grap.ps

grap.1:	grap.doc
	sed "s#DEFINES_FILE#$(DEFINESDIR)/grap.defines#g; s#EXAMPLES#$(DEFINESDIR)/examples#g;" < grap.doc > grap.1 ;

manifest:	manifest.in
	sed 's/^/${DISTDIR}\//;' < manifest.in > manifest

dist:	manifest grap.man grap.ps .makesum
	${RM} examples/test.grap
	cd .. && tar cf - grap | (cd /tmp && tar xf - && mv grap ${DISTDIR} )
	cd /tmp && tar --create --gzip --file ${DISTDIR}.tar.gz \
		 --files-from ${DISTDIR}/manifest
	mv /tmp/${DISTDIR}.tar.gz .
	${RM} -r /tmp/${DISTDIR}

clean:
	${RM} grap $(OBJS) *.o ${DISTDIR}.tar.gz *core* y.output

cleanconfig:
	${RM} config.log config.status config.cache 

veryclean:
	${MAKE} clean
	${RM} grap_lex.cc grap.cc y.tab.h version.cc *.tgz  grap.1 \
		grap.man grap.ps 

spotless:
	${MAKE} veryclean
	${MAKE} cleanconfig
	${RM} .depend configure Makefile config.h cksum.* manifest


# The || true lines allow make to continue on systems where install -d
# fails on existing directories.
install:	grap grap.defines grap.1
	strip grap
	$(INSTALL) -d $(BINDIR) || true
	$(INSTALL) -d $(MANDIR) || true
	$(INSTALL) -d $(DEFINESDIR)/examples || true
	$(INSTALL_PROGRAM) grap $(BINDIR)
	$(INSTALL_DATA) grap.1 $(MANDIR)
	$(INSTALL_DATA) grap*.defines $(DEFINESDIR)
	$(INSTALL_DATA) README $(DEFINESDIR)
	$(INSTALL_DATA) CHANGES $(DEFINESDIR)
	$(INSTALL_DATA) COPYRIGHT $(DEFINESDIR)
	$(INSTALL_DATA) grap.man $(DEFINESDIR)
	$(INSTALL_DATA) examples/*.d examples/example.ms examples/*.result examples/Makefile $(DEFINESDIR)/examples

deinstall:
	$(RM) $(BINDIR)/grap
	$(RM) $(MANDIR)/grap.1
	$(RM) $(DEFINESDIR)/grap.defines $(DEFINESDIR)/README $(DEFINESDIR)/CHANGES $(DEFINESDIR)/COPYRIGHT $(DEFINESDIR)/grap.man
	$(RM) $(DEFINESDIR)/examples/*.d $(DEFINESDIR)/examples/*.ms $(DEFINESDIR)/examples/Makefile $(DEFINESDIR)/examples/*result
	$(RMDIR) $(DEFINESDIR)/examples
	$(RMDIR) $(DEFINESDIR)

cleandepend:
	cat < /dev/null > .depend
	touch -t 9912311000 .depend > /dev/null 2>&1 || ( sleep 1; touch Makefile)

depend:	.depend

.depend:	Makefile
	grep "^#" grap.y > grap.cc
	grep "^#" grap_lex.l > grap_lex.cc
	touch y.tab.h
	${MKDEP} ${MKDEPFLAGS}
	${RM} grap.cc grap_lex.cc y.tab.h

makesum:	.makesum

.makesum:	grap grap.defines examples/example.ms
	cd examples && for f in md5 cksum sum echo ; do \
		sed 's/rand()/1/' < example.ms | \
			../grap -d ../grap.defines | $$f > ../cksum.$$f; \
	done
	touch .makesum

check:	grap grap.defines examples/example.ms
	cd examples && sed 's/rand()/1/' < example.ms | \
		../grap -d ../grap.defines | ${CKSUM_PROG} > /tmp/grap_check
	if diff /tmp/grap_check ./cksum.${CKSUM_PROG} ; then \
		${RM} /tmp/grap_check; \
		echo "pass";\
		exit 0; \
	else \
		${RM} /tmp/grap_check \
		echo "fail"; \
		exit 1; \
	fi

# Some of the standard GNU targets to make some people's lives easier

mostlyclean:	clean
distclean:	veryclean
	rm Makefile
maintainer-clean:	veryclean

include .depend