dnl Process this file with autoconf to produce a configure script.
AC_INIT(grap.y)
AC_CONFIG_HEADER(config.h)
AC_LANG_CPLUSPLUS

dnl Checks for programs.
AC_PROG_CXX
AC_PROG_LEX
AC_PROG_YACC
AC_PROG_INSTALL
AC_PATH_PROG(PERL,perl)

# Note to self: it's possible to get separate tables out of byacc.  It
# is confusing because g++ optimizes away the const static tables that
# byacc generates, and compiling those tables aren't the problem
# anyway.  So don't try it again.

AC_MSG_CHECKING(that $INSTALL supports -d)
if $INSTALL -d /tmp/test$$ && test -d /tmp/test$$; then 
	AC_MSG_RESULT(yes)
else
	INSTALL=$ac_install_sh
	AC_MSG_RESULT(no (directory installs will use $INSTALL))
fi
rm -rf /tmp/test$$

# Only use -Wall if we are using g++ (which understands it) 
# Also use g++ for generating dependencies if available
if test "$GXX" = "yes" ; then
	GXXFLAGS="-Wall"
	MAKEDEP='${CXX} -MM ${CXXFLAGS} ${SOURCES} >> Makefile'
else
	GXXFLAGS=""
	MAKEDEP='cat default_depend >> Makefile'
fi
AC_SUBST(GXXFLAGS)
AC_SUBST(MAKEDEP)

dnl Checks for libraries.

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h hash_map)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_CHECK_FUNCS(snprintf random rand)
AC_REPLACE_FUNCS(strdup)

if test $ac_cv_func_snprintf = "yes" ; then
	AC_CACHE_CHECK(for declaration of snprintf,grap_cv_decl_snprintf,
		AC_EGREP_CPP(snprintf,
#include <stdio.h>
,grap_cv_decl_snprintf="yes",grap_cv_decl_snprintf="no"))
	if test $grap_cv_decl_snprintf = "yes"; then
		AC_DEFINE(SNPRINTF_DECLARED)
	fi
fi


if test $ac_cv_func_random = "no" -a $ac_cv_func_rand = "no";  then
AC_MSG_ERROR(grap requires either random or rand)
fi

if test $ac_cv_func_random = "yes" ; then
	AC_CACHE_CHECK(for declaration of random,grap_cv_decl_random,
		AC_EGREP_CPP(random,
#include <stdlib.h>
#include <math.h>
,grap_cv_decl_random="yes",grap_cv_decl_random="no"))
	if test $grap_cv_decl_random = "yes"; then
		AC_DEFINE(RANDOM_DECLARED)
	fi
else
	AC_CACHE_CHECK(for declaration of rand,grap_cv_decl_random,
		AC_EGREP_CPP(rand,
#include <stdlib.h>
#include <math.h>
,grap_cv_decl_rand="yes",grap_cv_decl_rand="no"))
	if test $grap_cv_decl_rand = "yes"; then
		AC_DEFINE(RAND_DECLARED)
	fi
fi

if test $ac_cv_header_unistd_h = "yes" ; then
AC_CACHE_CHECK(for optarg in unistd.h,grap_cv_header_optarg,
AC_EGREP_HEADER(optarg,unistd.h,grap_cv_header_optarg="yes";
,grap_cv_header_optarg="no"))
if test $grap_cv_header_optarg = "yes"; then
AC_DEFINE(OPTARG_DEFINED)
fi
fi

if test $ac_cv_func_snprintf = "no"; then
AC_CACHE_CHECK(if sprintf returns an int, grap_cv_sprintf_int,
AC_TRY_RUN([
changequote(<<, >>)dnl
#include <stdio.h>
main(int argc, char* argv) {
	char a<<[10]>>;
	if ( (char *) sprintf(a,"ten") == a ) exit(1);
	else exit(0);
}
changequote([, ])dnl
],grap_cv_sprintf_int="yes",grap_cv_sprintf_int="no",echo ""))

if test $grap_cv_sprintf_int = "no" ; then 
AC_DEFINE(SPRINTF_NOT_INT)
fi
fi

test "x$prefix" = xNONE && prefix=$ac_default_prefix

# expand the data directory parameter.  Repeatedly eval the contents
# of ddir until it has not $ in it.

ddir=$datadir
while echo $ddir | grep '\$' > /dev/null ; do 
	ddir=`eval echo $ddir`
done

AC_DEFINE_UNQUOTED(DEFINES,"${ddir}/grap/grap.defines")

AC_OUTPUT(examples/Makefile Makefile)
